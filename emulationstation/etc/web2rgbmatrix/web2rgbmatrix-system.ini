###############################################################################
#
# web2rgbmatrix for Emulationstation
#
###############################################################################

###############################################################################
#
# Start of user options
#
# The following are user configurable, copy and edit in the web2rgbmatrix-user.ini
#
###############################################################################
# rgbmatrix hostname or IP, RetroPie does not support MDNS resolution by default
HOSTNAME="rgbmatrix.local"

# Set to true if matrix has a SD Card installed
SD_INSTALLED="true"

# SD GIF Update
SD_UPDATE="false"

# Path to GIF files
GIF_PATH="/home/pi/web2rgbmatrix/gifs"

# Update Linux scripts
SCRIPT_UPDATE="true"

# Update ESP32-Trinity
TRINITY_UPDATE="false"

# GIF Update, forces overwrite of exisiting GIFs
GIF_UPDATE="false"

# Debugging
DEBUG="false"

###############################################################################
# End of user options
###############################################################################

###############################################################################
# System Variables below this line, shouldn't need to be modified.
###############################################################################
REPOSITORY_URL="https://raw.githubusercontent.com/kconger/MiSTer_web2rgbmatrix/"
REPO_BRANCH="master"
WEB2RGBMATRIX_PATH="/etc/web2rgbmatrix"
DEBUGFILE="/tmp/web2rgbmatrix"

fblink="\e[5m"
fbold="\e[1m"
fdim="\e[2m"
freset="\e[0m\033[0m"
finvers="\e[7m"
fhidden="\e[8m"
funderl="\e[4m"
fblue="\e[1;34m"
fgreen="\e[1;32m"
fcyan="\e[1;36m"
fred="\e[1;31m"
fmagenta="\e[1;35m"
fyellow="\e[1;33m"
fwhite="\e[1;37m"
fgrey="\e[1;30m"
chide="\e[?25l"
cshow="\e[?25h"

###############################################################################
# System Functions below this line, shouldn't need to be modified.
###############################################################################
# Debug function
dbug() {
  if [ "${DEBUG}" = "true" ]; then
    if [ ! -e ${DEBUGFILE} ]; then                                           # log file not (!) exists (-e) create it
      echo "---------- web2rgbmatrix Debuglog ----------" > ${DEBUGFILE}
    fi 
    echo "${1}" >> ${DEBUGFILE}                                              # output debug text
  fi
}

# Send Core GIF image over the web
senddata() {
  if [ "${SD_INSTALLED}" = "true" ]; then
    dbug "Requesting matrix to display GIF from its SD Card File"
    HTTP_CODE=$(curl --write-out "%{http_code}" http://${HOSTNAME}/localplay?file=${1} --output /dev/null --silent) # request CORENAME
    case $HTTP_CODE in
      "200")
        echo "Successfully requested ${1}"
        dbug "Successfully requested ${1}"
        ;;
      "404")
        echo "${1} GIF not found on matrix SD"
        dbug "${1} GIF not found on matrix SD"
        ;;
      *)
        echo "Unknown error requesting ${1} GIF on matrix"
        dbug "Unknown error requesting ${1} GIF on matrix"
        ;;
    esac
  else
    dbug "Trying to send GIF to matrix"
    LTR=$(echo "${1:0:1}" | tr [a-z] [A-Z])
    if [ -r ${GIF_PATH}/animated/${LTR}/${1}.gif ]; then                                     # proceed if file exists and is readable (-r)
      HTTP_CODE=$(curl --write-out "%{http_code}" -F file=@${GIF_PATH}/animated/${LTR}/${1}.gif http://${HOSTNAME}/remoteplay --output /dev/null --silent) # transfer CORENAME.gif
      case $HTTP_CODE in
        "200")
          echo "Successfully copied ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          dbug "Successfully copied ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          ;;
        "500")
          echo "Error copying ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          dbug "Error copying ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          ;;
        *)
          echo "Unknown error copying ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          dbug "Unknown error copying ${GIF_PATH}/animated/${LTR}/${1}.gif to matrix"
          ;;
      esac
    elif [ -r ${GIF_PATH}/static/${LTR}/${1}.gif ]; then                                     # proceed if file exists and is readable (-r)
      HTTP_CODE=$(curl --write-out "%{http_code}" -F file=@${GIF_PATH}/static/${LTR}/${1}.gif http://${HOSTNAME}/remoteplay --output /dev/null --silent) # transfer CORENAME.gif
      case $HTTP_CODE in
        "200")
          echo "Successfully copied ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          dbug "Successfully copied ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          ;;
        "500")
          echo "Error copying ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          dbug "Error copying ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          ;;
        *)
          echo "Unknown error copying ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          dbug "Unknown error copying ${GIF_PATH}/static/${LTR}/${1}.gif to matrix"
          ;;
      esac
    else                                                                     # CORENAME.gif file not found
      echo "File ${GIF_PATH}/static/${LTR}/${1}.gif not found!"
      dbug "File ${GIF_PATH}/static/${LTR}/${1}.gif not found!"
      HTTP_CODE=$(curl --write-out "%{http_code}" http://${HOSTNAME}/text?line=${1} --output /dev/null --silent) # request Core Name as text
      case $HTTP_CODE in
        "200")
          echo "Successfully requested text display: ${1}"
          dbug "Successfully requested text display: ${1}"
          ;;
        "500")
          echo "Error requesting text display: ${1}"
          dbug "Error requesting text display: ${1}"
          ;;
        *)
          echo "Unknown error requesting text display: ${1}"
          dbug "Unknown error requesting text display: ${1}"
          ;;
      esac
    fi
  fi     
}
